import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

class Employee {
    String name;
    int age;
    double salary;

    Employee(String name, int age, double salary) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "Employee{name='" + name + "', age=" + age + ", salary=" + salary + '}';
    }
}

public class EmployeeSorter {
    public static void main(String[] args) {
        List<Employee> employees = new ArrayList<>();
        employees.add(new Employee("Alice", 30, 70000));
        employees.add(new Employee("Bob", 25, 50000));
        employees.add(new Employee("Charlie", 35, 90000));

        System.out.println("Sorted by Name:");
        employees.stream()
                .sorted(Comparator.comparing(emp -> emp.name))
                .forEach(System.out::println);

        System.out.println("\nSorted by Age:");
        employees.stream()
                .sorted(Comparator.comparingInt(emp -> emp.age))
                .forEach(System.out::println);

        System.out.println("\nSorted by Salary:");
        employees.stream()
                .sorted(Comparator.comparingDouble(emp -> emp.salary))
                .forEach(System.out::println);
    }
}




#MEDIUM LEVEL
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

class Student {
    String name;
    double marks;

    Student(String name, double marks) {
        this.name = name;
        this.marks = marks;
    }

    @Override
    public String toString() {
        return "Student{name='" + name + "', marks=" + marks + '}';
    }
}

public class StudentFilterSorter {
    public static void main(String[] args) {
        List<Student> students = new ArrayList<>();
        students.add(new Student("Emma", 85));
        students.add(new Student("Liam", 70));
        students.add(new Student("Sophia", 90));
        students.add(new Student("Noah", 80));

        List<String> filteredSortedNames = students.stream()
                .filter(student -> student.marks > 75)
                .sorted((s1, s2) -> Double.compare(s2.marks, s1.marks))
                .map(student -> student.name)
                .collect(Collectors.toList());

        System.out.println("Students scoring above 75%, sorted by marks:");
        filteredSortedNames.forEach(System.out::println);
    }
}


# HARD LEVEL-

import java.util.ArrayList;
import java.util.Comparator;
import java.util.DoubleSummaryStatistics;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

class Product {
    String name;
    String category;
    double price;

    Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }

    @Override
    public String toString() {
        return "Product{name='" + name + "', category='" + category + "', price=" + price + '}';
    }
}

public class ProductProcessor {
    public static void main(String[] args) {
        List<Product> products = new ArrayList<>();
        products.add(new Product("Laptop", "Electronics", 1200));
        products.add(new Product("Phone", "Electronics", 800));
        products.add(new Product("Shirt", "Clothing", 50));
        products.add(new Product("Jeans", "Clothing", 60));
        products.add(new Product("TV", "Electronics", 1500));
        products.add(new Product("Jacket", "Clothing", 100));

        // Grouping products by category
        Map<String, List<Product>> groupedByCategory = products.stream()
                .collect(Collectors.groupingBy(product -> product.category));

        System.out.println("Products grouped by category:");
        groupedByCategory.forEach((category, productList) -> {
            System.out.println(category + ": " + productList);
        });

        // Finding the most expensive product in each category
        Map<String, Product> mostExpensiveByCategory = products.stream()
                .collect(Collectors.groupingBy(product -> product.category,
                        Collectors.collectingAndThen(
                                Collectors.maxBy(Comparator.comparingDouble(product -> product.price)),
                                optionalProduct -> optionalProduct.orElse(null)
                        )));

        System.out.println("\nMost expensive product in each category:");
        mostExpensiveByCategory.forEach((category, product) -> {
            System.out.println(category + ": " + product);
        });

        // Calculating the average price of all products
        DoubleSummaryStatistics stats = products.stream()
                .collect(Collectors.summarizingDouble(product -> product.price));
        double averagePrice = stats.getAverage();

        System.out.println("\nAverage price of all products: $" + averagePrice);
    }
}
